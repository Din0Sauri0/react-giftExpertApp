{"version":3,"sources":["reportWebVitals.js","Components/AddCategory.js","Helpers/getGifs.js","Hooks/useFetchGifs.js","Components/GifGridItem.js","Components/GifGrid.js","GifExpertApp.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","protoType","PropTypes","func","isRequired","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","getGifs","GifGridItem","console","log","className","src","alt","GifGrid","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"8KAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,sCCJDQ,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVY,SAACC,GACnBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfpB,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,aAmB/BZ,EAAYe,UAAY,CACpBd,cAAee,IAAUC,KAAKC,Y,mCCXnBC,EAhBH,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACLC,EADK,iDAC2CC,UAAUH,GADrD,8DAEQI,MAAOF,GAFf,cAELG,EAFK,gBAGYA,EAAKC,OAHjB,uBAGHC,EAHG,EAGHA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAT9B,kBAaJM,GAbI,4CAAH,sDCoBGO,EAlBM,SAACf,GAClB,MAA0BlB,mBAAS,CAC/ByB,KAAM,GACNS,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAW,WAEPC,EAAQpB,GAAU1B,MAAM,SAAAoC,GAAG,OAAIQ,EAAS,CACpCX,KAAMG,EACNM,SAAS,SAGd,CAAChB,IAEGiB,GCNII,EAVK,SAAC,GAAsB,IAArBV,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAE7B,OADAoB,QAAQC,IAAI,CAACZ,KAAIC,QAAOV,QAEpB,sBAAKsB,UAAU,yDAAf,UACI,qBAAKC,IAAKvB,EAAKwB,IAAKd,IACpB,4BAAIA,QCFHe,EAAU,SAAC,GAAgB,IAAf3B,EAAc,EAAdA,SAErB,EAA+Be,EAAcf,GAAjCa,EAAZ,EAAON,KAAaS,EAApB,EAAoBA,QAGpB,OACI,qCACA,6BAAKhB,IAEDgB,GAAS,mBAAGQ,UAAU,mDAAb,yBAET,qBAAKA,UAAU,YAAf,SAGQX,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aCS/BiB,EAzBM,WAEjB,MAAoC9C,mBAAS,CAAC,yBAA9C,mBAAO+C,EAAP,KAAmBhD,EAAnB,KAMA,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQgD,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCdtC8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1B9D,M","file":"static/js/main.a3fa9c39.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handledSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cate => [inputValue, ...cate ]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handledSubmit}>\r\n            <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.protoType = {\r\n    setCategories: PropTypes.func.isRequired\r\n    \r\n}\r\n","\r\nconst getGif = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=5&api_key=JmZovcMIzWd3adjS6TJD8ChScuvrriVj`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url,\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}\r\n\r\nexport default getGif;","import { useEffect, useState } from \"react\";\r\nimport getGifs from '../Helpers/getGifs'\r\n\r\nconst useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect( () => {\r\n        \r\n        getGifs(category).then( img => setState({\r\n            data: img,\r\n            loading: false\r\n        }));\r\n\r\n    }, [category]); //Si cambia la categoria se dispara el useEffect (Eso hace referencia el segundo argumento, no lo tiene se disparara siempre)\r\n\r\n    return state;\r\n}\r\n\r\nexport default useFetchGifs;","import React from 'react'\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n    console.log({id, title, url})\r\n    return (\r\n        <div className='card animate__animated animate__bounce animate__fadeIn'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem;\r\n","import React, {useEffect, useState} from 'react'\r\nimport useFetchGifs from '../Hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem'\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs( category );\r\n\r\n\r\n    return (\r\n        <>\r\n        <h3>{category}</h3>\r\n        {\r\n            loading&&<p className=\"animate__animated animate__bounce animate__flash\">Cargando...</p>\r\n        }\r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem key={img.id} {...img} />\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport { AddCategory } from './Components/AddCategory';\r\nimport { GifGrid } from './Components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    //const categories = ['One Puch', 'Samurai X', 'Full Metal Alchemist', 'Dragon Ball']\r\n    const [categories, setCategories] = useState(['Full Metal Alchemist'])\r\n\r\n    // const handleAdd = () => {\r\n    //     setCategories( [...categories, 'Hunter X Hunter'] );\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid key={category} category={category} />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport GifExpertApp from './GifExpertApp'\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}